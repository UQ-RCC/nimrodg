plugins {
	id 'de.undercouch.download' version '4.1.1'
	id 'nebula.ospackage' version '8.5.6'
}

apply plugin: 'distribution'
apply plugin: 'application'

mainClassName = 'au.edu.uq.rcc.nimrodg.cli.NimrodCLI'

configurations {
	/* Packages that need to be loaded by Kepler. */
	nimrodK
	/* Packages that should be in a separate classloader. */
	nimrodKRuntime
	nimrodKRuntime.extendsFrom nimrodK
}

dependencies {
	implementation project(':nimrodg-cli')
	nimrodK project(':nimrodg-api')
	nimrodK group: 'org.glassfish', name: 'javax.json', version: JAVAX_JSON_VERSION
	nimrodKRuntime project(':nimrodg-parsing')
	nimrodKRuntime project(':nimrodg-impl-postgres')
}

distributions {
	main {
		baseName = 'nimrod'
		contents {
			from project(':nimrodg-cli').jar
			
			/* This is empty, exclude it */
			exclude jar.archiveName

			/* Fix the permissions on the jars. */
			filesMatching('*.jar') {
				it.mode(0644)
			}
		}
		distZip.enabled = false
	}
}

distTar {
	compression = Compression.GZIP
	extension = 'tar.gz' /* Not .tgz */
}

task buildNimrodKFatJar(type: Jar, dependsOn: configurations.nimrodKRuntime) {
	baseName = 'nimrod-kepler-fatjar'
	version = ''
	extension = 'nimjar'
	from {
		(configurations.nimrodKRuntime - configurations.nimrodK).collect {
			it.isDirectory() ? it : zipTree(it)
		}
	}

	exclude 'module-info.class'
	exclude 'META-INF/'
	exclude 'Log4j-charsets.properties'
}

task generateNimrodKModule(type: Copy, dependsOn: [buildNimrodKFatJar, configurations.nimrodK]) {
	configurations.nimrodK.each {
		from(it) into ("${buildDir}/nimrodk/lib/jar/nimrodg")
	}

	from(buildNimrodKFatJar.archivePath) into ("${buildDir}/nimrodk/lib/jar/nimrodg")
}

ext {
	/* https://github.com/jgitver/jgitver/blob/master/src/main/java/fr/brouillard/oss/jgitver/metadata/Metadatas.java#L25 */
	isDevBuild = Integer.valueOf(project.commit_distance) > 0
	if(isDevBuild) {
		packageName = 'nimrod-dev'
	} else {
		packageName = 'nimrod'
	}

	packageInstallDir = '/usr/share/nimrod'

	agentVersion = '6.0.2'
	agentList = [
		[platform:'x86_64-pc-linux-musl',		sha256:'be75682b7b4e70f57ec93bda22b98327cf3b843517828c5f42a11953f29a129a'],
	]
}

/* Create download and verify tasks for each agent. */
agentList.each { agent ->

	def destFile = "${buildDir}/agents/agent-${agent.platform}"

	tasks.create(name: "downloadAgent${agent.platform}", type: Download) {
		src "https://github.com/UQ-RCC/nimrodg-agent/releases/download/${project.agentVersion}/agent-${agent.platform}-${project.agentVersion}"
		dest destFile
		onlyIfModified true
	}

	tasks.create(name: "verifyAgent${agent.platform}", type: Verify, dependsOn: "downloadAgent${agent.platform}") {
		src destFile
		algorithm 'SHA-256'
		checksum agent.sha256
	}

	/* Add them to the distribution */
	distributions.main.contents.with {
		from(destFile) {
			into 'agents'
			fileMode 0755
		}
	}

	[distTar, distZip].each { it.dependsOn += "verifyAgent${agent.platform}" }
}

import org.redline_rpm.header.Flags

ospackage {
	packageName			project.packageName
	summary				'A specialised parametric modelling system.'
	packageDescription	'''It uses a simple declarative parametric modelling language to express
a parametric experiment.

It provides the machinery to automate the task of formulating, running,
monitoring, collating, presenting and visualising the results from
multiple individual experiments.

Nimrod incorporates distributed scheduling so that the appropriate
number and kind of resources to complete the job, e.g., HPC and
virtual machines, can be selected and used.

Nimrod helps researchers run computations remotely on the cloud. It can
turn your laptop into a supercomputer. With Nimrod you can run many
jobs â€” millions if need be.
'''

	version				project.version

	url					'https://rcc.uq.edu.au/nimrod'
	vendor				'Research Computing Centre'
	maintainer			"${vendor} <rcc-admin@uq.edu.au>"
	packager			maintainer

	license				'ASL 2.0'

	user				'root'
	permissionGroup		'root'

	into project.packageInstallDir

	with distributions.main.contents

	/* Lintian gets cranky about this. */
	exclude 'nimrod.bat'

	/* Handle configuration files. */
	[
			'setup-defaults.ini',
			'hpc.json',
			project(':nimrodg-resources').file("src/main/resources/au/edu/uq/rcc/nimrodg/resource/hpc/hpc.pbspro.j2"),
			project(':nimrodg-resources').file("src/main/resources/au/edu/uq/rcc/nimrodg/resource/hpc/hpc.slurm.j2"),
			project(':nimrodg-resources').file("src/main/resources/au/edu/uq/rcc/nimrodg/resource/hpc/hpc.lsf.j2")
	].forEach({
		def x = from(it) {
			fileMode 0644
			fileType CONFIG | NOREPLACE
			into '/etc/xdg/nimrod'
		}

		/* https://github.com/nebula-plugins/gradle-ospackage-plugin/issues/118 */
		x.eachFile { configurationFile("/${it.path}") }
	})

	link('/usr/bin/nimrod', "${project.packageInstallDir}/bin/nimrod")
}

buildDeb {
	arch				'all'

	requires			'default-jre-headless', '1.11', Flags.GREATER | Flags.EQUAL
	suggests			'postgresql', '10', Flags.GREATER | Flags.EQUAL
	suggests			'rabbitmq-server', '3.5.7', Flags.GREATER | Flags.EQUAL
}

buildRpm {
	release				'1'
	arch				NOARCH
	os					LINUX
	type				BINARY

	requires			'java-11-openjdk-headless'
}

task(generateArtifacts, dependsOn:[assembleDist, buildDeb, buildRpm]) {
}

