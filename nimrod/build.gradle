buildscript {
	repositories {
		jcenter()
	}

	dependencies {
		classpath 'com.netflix.nebula:gradle-ospackage-plugin:6.1.2'
	}
}

apply plugin: 'distribution'
apply plugin: 'application'
apply plugin: 'nebula.rpm'
apply plugin: 'nebula.deb'

mainClassName = 'au.edu.uq.rcc.nimrodg.cli.NimrodCLI'

configurations {
	/* Packages that need to be loaded by Kepler. */
	nimrodK
	/* Packages that should be in a separate classloader. */
	nimrodKRuntime
	nimrodKRuntime.extendsFrom nimrodK
}

dependencies {
	implementation project(':nimrodg-cli')
	nimrodK project(':nimrodg-api')
	nimrodK group: 'org.glassfish', name: 'javax.json', version: JAVAX_JSON_VERSION
	nimrodKRuntime project(':nimrodg-parsing')
	nimrodKRuntime project(':nimrodg-impl-postgres')
}

distributions {
	main {
		baseName = 'nimrod'
		contents {
			from project(':nimrodg-cli').jar
			
			/* This is empty, exclude it */
			exclude jar.archiveName

			/* Fix the permissions on the jars. */
			filesMatching('*.jar') {
				it.mode(0644)
			}
		}
		distZip.enabled = false
	}

	ci {
		baseName = main.baseName
		contents { with main.contents }
		ciDistZip.enabled = false
	}
}

ciDistTar {
	version = 'ci-current'
}

task buildNimrodKFatJar(type: Jar, dependsOn: configurations.nimrodKRuntime) {
	baseName = 'nimrod-kepler-fatjar'
	version = ''
	extension = 'nimjar'
	from {
		(configurations.nimrodKRuntime - configurations.nimrodK).collect {
			it.isDirectory() ? it : zipTree(it)
		}
	}

	exclude 'module-info.class'
	exclude 'META-INF/'
	exclude 'Log4j-charsets.properties'
}

task generateNimrodKModule(type: Copy, dependsOn: [buildNimrodKFatJar, configurations.nimrodK]) {
	configurations.nimrodK.each {
		from(it) into ("${buildDir}/nimrodk/lib/jar/nimrodg")
	}

	from(buildNimrodKFatJar.archivePath) into ("${buildDir}/nimrodk/lib/jar/nimrodg")
}

ext {
	packageSummary = 'A specialised parametric modelling system.'
	packageDescription = '''It uses a simple declarative parametric modelling language to express
a parametric experiment.

It provides the machinery to automate the task of formulating, running,
monitoring, collating, presenting and visualising the results from
multiple individual experiments.

Nimrod incorporates distributed scheduling so that the appropriate
number and kind of resources to complete the job, e.g., HPC and
virtual machines, can be selected and used.

Nimrod helps researchers run computations remotely on the cloud. It can
turn your laptop into a supercomputer. With Nimrod you can run many
jobs â€” millions if need be.
'''
	packageMaintainer = 'Research Computing Centre <rcc-admin@uq.edu.au>'
	packageUrl = 'https://rcc.uq.edu.au/nimrod'

	packageInstallDir = '/usr/share/nimrod'
}

task buildDeb(type: Deb, dependsOn: assembleDist) {
	summary				project.packageSummary
	packageDescription	project.packageDescription

	version				"${project.version}-0ubuntu1"
	maintainer			project.packageMaintainer
	arch				'all'
	url					project.packageUrl

	requires			'openjdk-11-jre-headless'
	recommends			'postgresql-10'
	recommends			'rabbitmq-server'

	user				'root'
	permissionGroup		'root'


	into project.packageInstallDir

	def distContents = copySpec {
		with distributions.main.contents

		/* Lintian gets cranky about this. */
		exclude 'nimrod.bat'
	}

	with distContents

	link('/usr/bin/nimrod', "${project.packageInstallDir}/bin/nimrod")

	//eachFile { println it }
}

task buildRpm(type: Rpm, dependsOn: assembleDist) {
	summary				project.packageSummary
	packageDescription	project.packageDescription

	license				'ASL 2.0'
	release				'1'
	arch				NOARCH
	os					LINUX
	type				BINARY
	packager			project.packageMaintainer
	url					project.packageUrl
	vendor				'Research Computing Centre'

	requires			'java-11-openjdk-headless'

	user				'root'
	permissionGroup		'root'

	into project.packageInstallDir

	def distContents = copySpec {
		with distributions.main.contents

		/* Lintian gets cranky about this. */
		exclude 'nimrod.bat'
	}

	with distContents
	link('/usr/bin/nimrod', "${project.packageInstallDir}/bin/nimrod")
}

task(generateArtifacts, dependsOn:[assembleDist, assembleCiDist, buildDeb, buildRpm]) {
}

